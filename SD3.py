import streamlit as st
import requests
from PIL import Image, ImageDraw, ImageFont
import io
import os

output_dir = "outputs"
os.makedirs(output_dir, exist_ok=True)

st.set_page_config(initial_sidebar_state="collapsed", page_icon="static/sai_logo.ico", layout="centered")

def generate_image(api_key, prompt, aspect_ratio, mode, negative_prompt, model, seed, output_format, image_file=None):
    headers = {
        "authorization": f"Bearer {api_key}",
        "accept": "image/*"
    }
    data = {
        "prompt": prompt,
        "aspect_ratio": aspect_ratio,
        "mode": mode,
        "model": model,
        "output_format": output_format
    }
    files = {"none": ''}  # Default to no file if none provided

    if seed != 0:
        data['seed'] = seed
    if negative_prompt:
        data['negative_prompt'] = negative_prompt
    if image_file is not None:
        image_bytes = image_file.getvalue()
        files = {'image': ('image.jpg', image_bytes, 'image/jpeg')}

    response = requests.post(
        "https://api.stability.ai/v2beta/stable-image/generate/sd3",
        headers=headers,
        files=files,
        data=data
    )
    return response

def main():
    st.image("static/SD3_webui_logo_image.png", width=700) # Image generated by r/balianone - https://www.reddit.com/r/StableDiffusion/comments/1ax9ifz/creating_easy_stable_diffusion_3_sd3_image_with/ & editted by MackinationsAi
    api_key = st.text_input("Enter your API key", type="password")
    models = st.selectbox("Select the model:", ["sd3", "sd3-turbo"], index=0)
    mode = st.selectbox("Select generation mode:", ["text-to-image", "image-to-image"], index=0)
    prompt = st.text_area("Enter positive prompt:")
    negative_prompt = st.text_input("Enter negative prompt: (optional)")
    aspect_ratios = st.selectbox("Select the aspect ratio:", ["1:1", "2:3", "3:2", "4:5", "5:4", "16:9", "21:9", "9:16", "9:21"], index=0) if mode == "text-to-image" else None
    seed = st.slider("Select a seed: (randomize = 0)", min_value=0, max_value=4294967294, value=0, step=1)
    strength = st.slider("Denoising Strength:", min_value=0.0, max_value=1.0, value=0.5, step=0.01) if mode == "image-to-image" else None
    output_formats = st.selectbox("Select the output format:", ["jpeg", "png"], index=1)
    uploaded_file = st.file_uploader("Upload an image for image-to-image generation.", type=["png", "jpg", "jpeg"]) if mode == "image-to-image" else None

    if st.button('Generate Image', use_container_width=True):
        with st.spinner('Generating Image...'):
            result = generate_image(api_key, prompt, aspect_ratios, mode, negative_prompt, models, seed, output_formats, uploaded_file)
            if result.status_code == 200:
                image = Image.open(io.BytesIO(result.content))
                st.image(image, use_column_width=True)
                file_path = os.path.join(output_dir, f"sd3-img_{models}_{seed}.{output_formats}")
                image.save(file_path)
                st.success(f'Image saved to {file_path}')
            else:
                st.error('Failed to generate image: ' + str(result.json()))

if __name__ == "__main__":
    main()